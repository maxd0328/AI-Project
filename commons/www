#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let http = require('http');

let cookieParser = require('cookie-parser');
let logger = require('morgan');
const express = require("express");
const path = require("path");

const session = require('express-session');
const RedisStore = require('connect-redis')(session);
const Redis = require('ioredis');

/**
 * Add necessary middleware functions
 */

app.set('views', path.join(__dirname, '../views'));
app.set('view engine', 'ejs');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

/**
 * Set up Redis session middleware
 */

const redisClient = Redis.Cluster([
    {
        host: 'clustercfg.ai-project-session-data.6uon1a.use1.cache.amazonaws.com',
        port: 6379
    }
]);

app.use(
    session({
        store: new RedisStore({ client: redisClient }),
        secret: '$heG0nn4H0ll4nd0Nmy$pO0R',
        resave: false,
        saveUninitialized: false,
        cookie: {
            secure: process.env.NODE_ENV === 'production',
            maxAge: 1000 * 60 * 60 * 24 // session timeout, currently set to 1 day
        }
    })
);

/**
 * Error handler
 */

app.use(function(err, req, res, next) {
    console.log(err);

    // set locals, only providing error when not in production
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') !== 'production' ? err : {};
    let status = err.status || 500;

    // render the error page
    res.status(status);
    res.send(`${status}: internal server error`);
});

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
