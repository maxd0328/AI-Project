#!/usr/bin/env node

/**
 * Module dependencies.
 */

let http = require('http');
let path = require('path');

/**
 * Load app from server library
 */

const library = require('server-lib');
const repo = library.utils.middleware.MiddlewareRepository;

const app = library.app.createExpressApp(
    repo.viewEJS(path.join(__dirname, 'views/')),
    repo.serveStatic(path.join(__dirname, 'public/')),
    repo.session(),
    repo.router('/user', require('./code/user')),
    repo.router('/bucket', require('./code/bucket')),
    repo.router('/datasets', require('./code/datasets')),
    repo.router('/', require('./code/core')));

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
